/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as ReleasesImport } from './routes/releases'
import { Route as AdminImport } from './routes/admin'
import { Route as AddMovieImport } from './routes/add-movie'
import { Route as CategoryIndexImport } from './routes/category/index'
import { Route as WatchMovieIdImport } from './routes/watch/$movieId'
import { Route as USettingsImport } from './routes/u/settings'
import { Route as MoviesIdImport } from './routes/movies.$id'
import { Route as CategoryCategoryImport } from './routes/category/$category'
import { Route as WatchMovieIdTrailerImport } from './routes/watch/$movieId.trailer'

// Create Virtual Routes

const MyListLazyImport = createFileRoute('/my-list')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const MyListLazyRoute = MyListLazyImport.update({
  path: '/my-list',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/my-list.lazy').then((d) => d.Route))

const SearchRoute = SearchImport.update({
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const ReleasesRoute = ReleasesImport.update({
  path: '/releases',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const AddMovieRoute = AddMovieImport.update({
  path: '/add-movie',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const CategoryIndexRoute = CategoryIndexImport.update({
  path: '/category/',
  getParentRoute: () => rootRoute,
} as any)

const WatchMovieIdRoute = WatchMovieIdImport.update({
  path: '/watch/$movieId',
  getParentRoute: () => rootRoute,
} as any)

const USettingsRoute = USettingsImport.update({
  path: '/u/settings',
  getParentRoute: () => rootRoute,
} as any)

const MoviesIdRoute = MoviesIdImport.update({
  path: '/movies/$id',
  getParentRoute: () => rootRoute,
} as any)

const CategoryCategoryRoute = CategoryCategoryImport.update({
  path: '/category/$category',
  getParentRoute: () => rootRoute,
} as any)

const WatchMovieIdTrailerRoute = WatchMovieIdTrailerImport.update({
  path: '/trailer',
  getParentRoute: () => WatchMovieIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/add-movie': {
      id: '/add-movie'
      path: '/add-movie'
      fullPath: '/add-movie'
      preLoaderRoute: typeof AddMovieImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/releases': {
      id: '/releases'
      path: '/releases'
      fullPath: '/releases'
      preLoaderRoute: typeof ReleasesImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/my-list': {
      id: '/my-list'
      path: '/my-list'
      fullPath: '/my-list'
      preLoaderRoute: typeof MyListLazyImport
      parentRoute: typeof rootRoute
    }
    '/category/$category': {
      id: '/category/$category'
      path: '/category/$category'
      fullPath: '/category/$category'
      preLoaderRoute: typeof CategoryCategoryImport
      parentRoute: typeof rootRoute
    }
    '/movies/$id': {
      id: '/movies/$id'
      path: '/movies/$id'
      fullPath: '/movies/$id'
      preLoaderRoute: typeof MoviesIdImport
      parentRoute: typeof rootRoute
    }
    '/u/settings': {
      id: '/u/settings'
      path: '/u/settings'
      fullPath: '/u/settings'
      preLoaderRoute: typeof USettingsImport
      parentRoute: typeof rootRoute
    }
    '/watch/$movieId': {
      id: '/watch/$movieId'
      path: '/watch/$movieId'
      fullPath: '/watch/$movieId'
      preLoaderRoute: typeof WatchMovieIdImport
      parentRoute: typeof rootRoute
    }
    '/category/': {
      id: '/category/'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof CategoryIndexImport
      parentRoute: typeof rootRoute
    }
    '/watch/$movieId/trailer': {
      id: '/watch/$movieId/trailer'
      path: '/trailer'
      fullPath: '/watch/$movieId/trailer'
      preLoaderRoute: typeof WatchMovieIdTrailerImport
      parentRoute: typeof WatchMovieIdImport
    }
  }
}

// Create and export the route tree

interface WatchMovieIdRouteChildren {
  WatchMovieIdTrailerRoute: typeof WatchMovieIdTrailerRoute
}

const WatchMovieIdRouteChildren: WatchMovieIdRouteChildren = {
  WatchMovieIdTrailerRoute: WatchMovieIdTrailerRoute,
}

const WatchMovieIdRouteWithChildren = WatchMovieIdRoute._addFileChildren(
  WatchMovieIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/add-movie': typeof AddMovieRoute
  '/admin': typeof AdminRoute
  '/releases': typeof ReleasesRoute
  '/search': typeof SearchRoute
  '/my-list': typeof MyListLazyRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/movies/$id': typeof MoviesIdRoute
  '/u/settings': typeof USettingsRoute
  '/watch/$movieId': typeof WatchMovieIdRouteWithChildren
  '/category': typeof CategoryIndexRoute
  '/watch/$movieId/trailer': typeof WatchMovieIdTrailerRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/add-movie': typeof AddMovieRoute
  '/admin': typeof AdminRoute
  '/releases': typeof ReleasesRoute
  '/search': typeof SearchRoute
  '/my-list': typeof MyListLazyRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/movies/$id': typeof MoviesIdRoute
  '/u/settings': typeof USettingsRoute
  '/watch/$movieId': typeof WatchMovieIdRouteWithChildren
  '/category': typeof CategoryIndexRoute
  '/watch/$movieId/trailer': typeof WatchMovieIdTrailerRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/add-movie': typeof AddMovieRoute
  '/admin': typeof AdminRoute
  '/releases': typeof ReleasesRoute
  '/search': typeof SearchRoute
  '/my-list': typeof MyListLazyRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/movies/$id': typeof MoviesIdRoute
  '/u/settings': typeof USettingsRoute
  '/watch/$movieId': typeof WatchMovieIdRouteWithChildren
  '/category/': typeof CategoryIndexRoute
  '/watch/$movieId/trailer': typeof WatchMovieIdTrailerRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/add-movie'
    | '/admin'
    | '/releases'
    | '/search'
    | '/my-list'
    | '/category/$category'
    | '/movies/$id'
    | '/u/settings'
    | '/watch/$movieId'
    | '/category'
    | '/watch/$movieId/trailer'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/add-movie'
    | '/admin'
    | '/releases'
    | '/search'
    | '/my-list'
    | '/category/$category'
    | '/movies/$id'
    | '/u/settings'
    | '/watch/$movieId'
    | '/category'
    | '/watch/$movieId/trailer'
  id:
    | '__root__'
    | '/'
    | '/add-movie'
    | '/admin'
    | '/releases'
    | '/search'
    | '/my-list'
    | '/category/$category'
    | '/movies/$id'
    | '/u/settings'
    | '/watch/$movieId'
    | '/category/'
    | '/watch/$movieId/trailer'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AddMovieRoute: typeof AddMovieRoute
  AdminRoute: typeof AdminRoute
  ReleasesRoute: typeof ReleasesRoute
  SearchRoute: typeof SearchRoute
  MyListLazyRoute: typeof MyListLazyRoute
  CategoryCategoryRoute: typeof CategoryCategoryRoute
  MoviesIdRoute: typeof MoviesIdRoute
  USettingsRoute: typeof USettingsRoute
  WatchMovieIdRoute: typeof WatchMovieIdRouteWithChildren
  CategoryIndexRoute: typeof CategoryIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AddMovieRoute: AddMovieRoute,
  AdminRoute: AdminRoute,
  ReleasesRoute: ReleasesRoute,
  SearchRoute: SearchRoute,
  MyListLazyRoute: MyListLazyRoute,
  CategoryCategoryRoute: CategoryCategoryRoute,
  MoviesIdRoute: MoviesIdRoute,
  USettingsRoute: USettingsRoute,
  WatchMovieIdRoute: WatchMovieIdRouteWithChildren,
  CategoryIndexRoute: CategoryIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/add-movie",
        "/admin",
        "/releases",
        "/search",
        "/my-list",
        "/category/$category",
        "/movies/$id",
        "/u/settings",
        "/watch/$movieId",
        "/category/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/add-movie": {
      "filePath": "add-movie.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx"
    },
    "/releases": {
      "filePath": "releases.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/my-list": {
      "filePath": "my-list.lazy.tsx"
    },
    "/category/$category": {
      "filePath": "category/$category.tsx"
    },
    "/movies/$id": {
      "filePath": "movies.$id.tsx"
    },
    "/u/settings": {
      "filePath": "u/settings.tsx"
    },
    "/watch/$movieId": {
      "filePath": "watch/$movieId.tsx",
      "children": [
        "/watch/$movieId/trailer"
      ]
    },
    "/category/": {
      "filePath": "category/index.tsx"
    },
    "/watch/$movieId/trailer": {
      "filePath": "watch/$movieId.trailer.tsx",
      "parent": "/watch/$movieId"
    }
  }
}
ROUTE_MANIFEST_END */
